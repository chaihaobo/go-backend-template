// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/chaihaobo/be-template/application"
	"github.com/chaihaobo/be-template/application/health"
	user2 "github.com/chaihaobo/be-template/application/user"
	"github.com/chaihaobo/be-template/cmd/core"
	"github.com/chaihaobo/be-template/infrastructure"
	"github.com/chaihaobo/be-template/infrastructure/cache"
	"github.com/chaihaobo/be-template/infrastructure/store"
	"github.com/chaihaobo/be-template/infrastructure/store/client"
	"github.com/chaihaobo/be-template/infrastructure/store/repository"
	"github.com/chaihaobo/be-template/infrastructure/store/repository/user"
	"github.com/chaihaobo/be-template/resource"
	"github.com/chaihaobo/be-template/resource/config"
	"github.com/chaihaobo/be-template/resource/logger"
	"github.com/chaihaobo/be-template/resource/metric"
	"github.com/chaihaobo/be-template/resource/tracer"
	"github.com/chaihaobo/be-template/resource/validator"
	"github.com/chaihaobo/be-template/transport"
	"github.com/chaihaobo/be-template/transport/grpc"
	controller2 "github.com/chaihaobo/be-template/transport/grpc/controller"
	"github.com/chaihaobo/be-template/transport/http"
	"github.com/chaihaobo/be-template/transport/http/controller"
	health2 "github.com/chaihaobo/be-template/transport/http/controller/health"
	user3 "github.com/chaihaobo/be-template/transport/http/controller/user"
)

// Injectors from wire.go:

func initContext(configPath string) (*core.Context, error) {
	configuration, err := config.NewConfiguration(configPath)
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.New(configuration)
	if err != nil {
		return nil, err
	}
	validatorValidator, err := validator.NewValidator()
	if err != nil {
		return nil, err
	}
	prometheusMetric, err := metric.NewPrometheusMetric(configuration)
	if err != nil {
		return nil, err
	}
	tracerTracer, err := tracer.NewTracer(configuration)
	if err != nil {
		return nil, err
	}
	resourceResource := resource.NewResource(configuration, loggerLogger, validatorValidator, prometheusMetric, tracerTracer)
	clientClient, err := client.New(resourceResource)
	if err != nil {
		return nil, err
	}
	userRepository := user.NewRepository(clientClient)
	repositoryRepository := repository.New(userRepository)
	storeStore, err := store.New(clientClient, repositoryRepository)
	if err != nil {
		return nil, err
	}
	cacheClient, err := cache.NewClient(resourceResource)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure := infrastructure.New(storeStore, cacheClient)
	service := health.NewService(resourceResource, infrastructureInfrastructure)
	userService := user2.NewService(resourceResource, infrastructureInfrastructure)
	applicationApplication := application.New(service, userService)
	healthController := health2.NewController(resourceResource, applicationApplication)
	userController := user3.NewController(resourceResource, applicationApplication)
	controllerController := controller.New(healthController, userController)
	httpTransport := http.NewTransport(resourceResource, applicationApplication, controllerController)
	controller3 := controller2.NewController(resourceResource, applicationApplication)
	grpcTransport := grpc.NewTransport(resourceResource, applicationApplication, controller3)
	transportTransport := transport.New(resourceResource, applicationApplication, httpTransport, grpcTransport)
	context := core.NewContext(resourceResource, infrastructureInfrastructure, applicationApplication, transportTransport)
	return context, nil
}
